!! Supporting JSON files

Current PharoEDA settings are stored in a ""config"" folder on the root folder of the project. The actual settings are expected to be provided in a file therein, whose name uses the ""PHARO_ENV"" environment variable: ~~[PHARO_ENV].json~~.

The format of the json files is known in advance by the logic in charge of building the ==SettingBrowser== configuration tree:

[[[
{
  "commandListener": {
    [...]
  },
  "eventPublisher": {
    [...]
  },
  "eventStore": {
    [...]
  },
  "projections": {
    [...]
  },
  "logging": {
    [...]
  },
  [...]
}
]]]

The format suggests that every top-level entry represents an adapter. We can use the key to identify the type of the adapter.

Let's look at the first one in detail.

[[[
{
  "commandListener": {
    "host": "localhost",
    "port": 61613,
    "user": "user",
    "password": "secret",
    "queue": "messages-to-eda",
    "durable": true,
    "ack": "client-individual",
    "prefetchCount": 1,
    "timeout": 60,
    "debug": true,
    "restartOnError": false
  },
  [...]
]]]

The discover process would:
- read the json file,
- find the ""commandListener"" entry,
- find out the adapter class involved,
- build a new adapter with the settings from the ""commandListener"" entry.

Let's not forget there can be many json files, one per environment. However, we can think of the "environment" as an adapter constraint. We don't need to take it into account when implementing this first discovery process.

!!! First iteration

We can start with a test that reads a json and builds a dictionary with it.

% ${changes:path=code/001-EDAAJsonFileDiscovererTest.ombu}$
[[[classDefinition=true|lineNumber=true
TestCase subclass: #EDAAJsonFileDiscovererTest
	instanceVariableNames: 'tempJsonFile'
	classVariableNames: ''
	package: 'EDAA-Domain-Tests'
]]]

We'll use a temporary file for our tests.

% ${changes:path=code/002-EDAAJsonFileDiscovererTest_setUp.ombu}$
[[[methodDefinition=true|lineNumber=true
setUp
	super setUp.
	tempJsonFile := File
		named:
			(FileSystem workingDirectory / (self class printString , '.json'))
				nextVersion
]]]

The temporary file needs to be deleted afterwards.

% ${changes:path=code/002-EDAAJsonFileDiscovererTest_tearDown.ombu}$
[[[methodDefinition=true|lineNumber=true
tearDown
	tempJsonFile ifNotNil: [ :f | f name delete ].
	super tearDown
]]]

A simple method to write to a file.

% ${changes:path=code/003-EDAAJsonFileDiscovererTest_write_toFile_.ombu}$
[[[methodDefinition=true|lineNumber=true
write: aString toFile: aFileReference
	aFileReference
		writeStreamDo: [ :stream | stream nextPutAll: aString ]
]]]

Our first test is as follows:

% ${changes:path=code/004-EDAAJsonFileDiscovererTest_testParseAnEmptyJsonFile.ombu}$
[[[methodDefinition=true|lineNumber=true
testParseAnEmptyJsonFile
	| fileContents discoverer |
	fileContents := '{}'.
	self write: fileContents toFile: tempJsonFile.
	discoverer := EDAAJsonFileDiscoverer forJsonFile: tempJsonFile.
	self
		assert: discoverer isNotNil;
		assert: discoverer candidates isEmpty
]]]

Pharo can create the new class for us, right inside the debugger.

% ${changes:path=code/005-EDAAJsonFileDiscoverer.ombu}$
[[[classDefinition=true|lineNumber=true
Object subclass: #EDAAJsonFileDiscoverer
		instanceVariableNames: 'jsonFile candidates'
		classVariableNames: ''
		category: 'EDAA-Domain'
]]]

Before continuing, create the accessors for the ""jsonFile"" and ""candidates"" attributes.

Modify the ""candidates""" getter as follows:

% ${changes:path=code/006-EDAAJsonFileDiscoverer_candidates.ombu}$
[[[classDefinition=true|lineNumber=true
candidates
	^ candidates
		ifNil: [ self candidates: OrderedCollection new.
			candidates ]
]]]

Afterwards, running the test allows us to use the debugger to write the factory method.

% ${changes:path=code/007-EDAAJsonFileDiscoverer_class_forJsonFile_.ombu}$
[[[classDefinition=true|lineNumber=true
forJsonFile: aFile
	^ self new
		jsonFile: aFile;
		yourself
]]]

This test should now pass. Let's create a new one that forces us to parse the file.

% ${changes:path=code/008-EDAAJsonFileDiscovererTest_testParseAFlatJsonFile.ombu}$
[[[methodDefinition=true|lineNumber=true
testParseAFlatJsonFile
	| fileContents discoverer |
	fileContents := '{
  "sample": "value"
}'.
	self write: fileContents toFile: tempJsonFile.
	discoverer := EDAAJsonFileDiscoverer forJsonFile: tempJsonFile.
	self
		assert: discoverer isNotNil;
		assert: discoverer candidates isNotEmpty;
		assert: discoverer candidates size equals: 1;
		assert: discoverer candidates first isNotNil;
		assert: (discoverer candidates first at: 'sample') equals: 'value'
]]]

The test fails since the ""candidates"" returned is an empty list. We have to decide where ==EDAAJsonFileDiscoverer== would process the file, either when it gets created, or more lazily, when the candidates are requested. Let's use the second approach. We have already customized the ""candidates"" getter.

% ${changes:path=code/009-EDAAJsonFileDiscoverer_candidates.ombu}$
[[[methodDefinition=true|lineNumber=true
candidates
	^ candidates
		ifNil: [ self candidates: (self processJsonFile: self jsonFile).
			candidates ]
]]]

The simplest implementation according to our tests is the trivial one.

% ${changes:path=code/010-EDAAJsonFileDiscoverer_processJsonFile_.ombu}$
[[[methodDefinition=true|lineNumber=true
processJsonFile: aFile
	^ OrderedCollection
		with:
			(Dictionary new
				at: 'sample' put: 'value';
				yourself)
]]]

Our tests are passing. Let's write another one that force us to write the actual code to parse Json files.

% ${changes:path=code/011-EDAAJsonFileDiscovererTest_testParseAnotherFlatJsonFile.ombu}$
[[[methodDefinition=true|lineNumber=true
testParseAnotherFlatJsonFile
	| fileContents discoverer |
	fileContents := '{
  "candidate1": "value1",
  "candidate2": "value2"
}'.
	self write: fileContents toFile: tempJsonFile.
	discoverer := EDAAJsonFileDiscoverer forJsonFile: tempJsonFile.
	self
		assert: discoverer isNotNil;
		assert: discoverer candidates isNotEmpty;
		assert: discoverer candidates size equals: 2;
		assert: discoverer candidates first isNotNil;
		assert: (discoverer candidates first at: 'candidate1')
			equals: 'value1';
		assert: discoverer candidates second isNotNil;
		assert: (discoverer candidates second at: 'candidate2')
			equals: 'value2'
]]]

This new test fails, as we expected. To parse Json files, we'll use NeoJSON. It's already declared in the PharodEDA-Common dependency.

% ${changes:path=code/012-EDAAJsonFileDiscoverer_processJsonFile_.ombu}$
[[[methodDefinition=true|lineNumber=true
processJsonFile: aFile
	| result map |
	result := OrderedCollection new.
	map := (NeoJSONReader on: aFile name readStream) parseMap.
	map
		keysAndValuesDo: [ :k :v |
			result
				add:
					(Dictionary new
						at: k put: v;
						yourself) ].
	^ result
]]]

This method parses the file, assuming it's a map. Since the test expects a list, we convert each top-level entry in its own item in the resulting collection.

The tests pass now. Our next test will resemble the current format of our Json files.

% ${changes:path=code/013-EDAAJsonFileDiscovererTest_testParseCommandListenerAdapterInJsonFile.ombu}$
[[[methodDefinition=true|lineNumber=true
testParseCommandListenerAdapterInJsonFile
	| fileContents discoverer commandListener |
	fileContents := '{
  "commandListener": {
    "host": "localhost",
    "port": 61613,
    "user": "user",
    "password": "secret",
    "queue": "messages-to-eda",
    "durable": true,
    "ack": "client-individual",
    "prefetchCount": 1,
    "timeout": 60,
    "debug": true,
    "restartOnError": false
  }
}'.
	self write: fileContents toFile: tempJsonFile.
	discoverer := EDAAJsonFileDiscoverer forJsonFile: tempJsonFile.
	self
		assert: discoverer isNotNil;
		assert: discoverer candidates isNotEmpty;
		assert: discoverer candidates size equals: 1;
		assert: discoverer candidates first isNotNil.
	commandListener := discoverer candidates first at: 'commandListener'.
	self
		assert: commandListener isNotNil;
		assert: (commandListener at: 'host') equals: 'localhost';
		assert: (commandListener at: 'port') equals: 61613;
		assert: (commandListener at: 'user') equals: 'user';
		assert: (commandListener at: 'password') equals: 'secret';
		assert: (commandListener at: 'queue') equals: 'messages-to-eda';
		assert: (commandListener at: 'durable') equals: true;
		assert: (commandListener at: 'ack') equals: 'client-individual';
		assert: (commandListener at: 'prefetchCount') equals: 1;
		assert: (commandListener at: 'timeout') equals: 60;
		assert: (commandListener at: 'debug') equals: true;
		assert: (commandListener at: 'restartOnError') equals: false
]]]

This test also passes. It shows numbers and booleans are parsed correctly.

Before continuing, let's not forget to add these packages to our baseline, and push the changes using Iceberg.

% ${changes:path=code/014-BaselineOfPharoEDAAdapters_declarePackagesIn_.ombu}$
[[[methodDefinition=true|lineNumber=true
declarePackagesIn: spec
	spec
		package: #'EDAA-Domain'
			with: [ spec requires: #('PharoEDACommon') ];
		package: #'EDAA-Domain-Tests'
			with: [ spec requires: #('EDAA-Domain') ];
		package: #'EDAA-EventStore-InMemory'
			with: [ spec requires: #('PharoEDACommon') ];
		package: #'EDAA-EventStore-Voyage'
			with: [ spec requires: #('Voyage' 'PharoEDACommon') ];
		package: #'EDAA-Messaging-Stomp'
			with: [ spec requires: #('Stamp' 'PharoEDACommon') ];
		package: #'EDAA-Projections-Voyage'
			with: [ spec requires: #('Voyage' 'PharoEDACommon') ];
		package: #'EDAA-SMTP' with: [ spec requires: #('PharoEDACommon') ]
]]]

% ${changes:path=code/015-BaselineOfPharoEDAAdapters_declareGroupsIn_.ombu}$
[[[methodDefinition=true|lineNumber=true
declareGroupsIn: spec
	spec
		group: 'core'
			with:
			#(#'EDAA-Domain' #'EDAA-EventStore-InMemory' #'EDAA-EventStore-Voyage' #'EDAA-Messaging-Stomp' #'EDAA-Projections-Voyage' #'EDAA-SMTP');
		group: 'tests' with: #(#'EDAA-Domain-Tests');
		group: 'default' with: #('core' 'tests')
]]]

At this point we are able to read Json files with similar structure as the current PharoEDA configuration files.
