!! Adapter candidates

After ==EDAAJsonFileDiscoverer== reads a file, it returns dictionaries as adapter candidates. We can think of a "candidate" as something which can become an adapter after ensuring certain conditions are met. It can infer the class of adapter it fits into too.

However, ==EDAAJsonFileDiscoverer== currently returns a list of dictionaries. Let's start by fixing it. We want it to discover candidates we can ask for their nature afterwards.
We need to change all our current tests, but let's focus on the first one for now.

% ${changes:path=code/001-EDAAJsonFileDiscovererTest_testParseAFlatJsonFile.ombu}$
[[[methodDefinition=true|lineNumber=true
testParseAFlatJsonFile
	| fileContents discoverer |
	fileContents := '{
  "sample": "value"
}'.
	self write: fileContents toFile: tempJsonFile.
	discoverer := EDAAJsonFileDiscoverer forJsonFile: tempJsonFile.
	self
		assert: discoverer isNotNil;
		assert: discoverer candidates isNotEmpty;
		assert: discoverer candidates size equals: 1;
		assert: discoverer candidates first isNotNil;
		assert: discoverer candidates first key equals: 'sample';
		assert: discoverer candidates first value equals: 'value'
]]]

==EDAAJsonFileDiscoverer== cannot return a list of dictionaries, but a list of candidates. And a candidate has a key and a value, albeit their contents are arbitrary.

Let's start with that: defining an initial candidate class, and improve our current discoverer to build candidates instead of just dictionaries.

We need a new test class ==EDAACandidateTest==:
% ${changes:path=code/002-EDAACandidateTest.ombu}$
[[[classDefinition=true|lineNumber=true
TestCase subclass: #EDAACandidateTest
	instanceVariableNames: ''
	classVariableNames: ''
	package: 'EDAA-Domain-Tests'
]]]

% ${changes:path=code/003-EDAACandidateTest_testBuilderMethod.ombu}$
[[[methodDefinition=true|lineNumber=true
testBuilderMethod
	| key candidate value |
	key := 'candidateKey'.
	value := 'candidateValue'.
	candidate := EDAACandidate withKey: key value: value.
	self
		assert: candidate key equals: key;
		assert: candidate value equals: value
]]]

Pharo will help us creating the new class.

% ${changes:path=code/004-EDAACandidate.ombu}$
[[[classDefinition=true|lineNumber=true
Object subclass: #EDAACandidate
	instanceVariableNames: 'key value'
	classVariableNames: ''
	package: 'EDAA-Domain'
]]]

Let's create the accessors as usual.

% ${changes:path=code/005-EDAACandidate_key.ombu}$
[[[methodDefinition=true|lineNumber=true
key
	^ key
]]]

% ${changes:path=code/006-EDAACandidate_key_.ombu}$
[[[methodDefinition=true|lineNumber=true
key: anObject
	key := anObject
]]]

% ${changes:path=code/007-EDAACandidate_value.ombu}$
[[[methodDefinition=true|lineNumber=true
value
	^ value
]]]

% ${changes:path=code/008-EDAACandidate_value_.ombu}$
[[[methodDefinition=true|lineNumber=true
value: anObject
	value := anObject
]]]

Running the test will make Pharo want to help us creating the builder method as well.

% ${changes:path=code/009-EDAACandidate_class_withKey_value_.ombu}$
[[[methodDefinition=true|lineNumber=true
withKey: aKey value: aValue
	^ self new
		key: aKey;
		value: aValue;
		yourself
]]]

The new test now passes, and we can focus on ""testParseAFlatJsonFile"" in ==EDAAJsonFileDiscovererTest==.
To make it pass, we need to change the implementation of ==EDAJsonFileDiscoverer==. It must return a list of ==EDAACandidate== instances, not dictionaries.

% ${changes:path=code/010-EDAAJsonFileDiscoverer_processJsonFile_.ombu}$
[[[methodDefinition=true|lineNumber=true
processJsonFile: aFile
	| result map |
	result := OrderedCollection new.
	map := (NeoJSONReader on: aFile name readStream) parseMap.
	map
		keysAndValuesDo:
			[ :k :v | result add: (EDAACandidate withKey: k value: v) ].
	^ result
]]]

There're two more tests we need to fix because they are failing after our changes in the nature of the candidate list ==JsonFileDiscoverer== returns.

% ${changes:path=code/011-EDAAJsonFileDiscovererTest_testParseAnothenFlatJsonFile.ombu}$
[[[methodDefinition=true|lineNumber=true
testParseAnotherFlatJsonFile
	| fileContents discoverer |
	fileContents := '{
  "candidate1": "value1",
  "candidate2": "value2"
}'.
	self write: fileContents toFile: tempJsonFile.
	discoverer := EDAAJsonFileDiscoverer forJsonFile: tempJsonFile.
	self
		assert: discoverer isNotNil;
		assert: discoverer candidates isNotEmpty;
		assert: discoverer candidates size equals: 2;
		assert: discoverer candidates first isNotNil;
		assert: discoverer candidates first key equals: 'candidate1';
		assert: discoverer candidates first value equals: 'value1';
		assert: discoverer candidates second isNotNil;
		assert: discoverer candidates second key equals: 'candidate2';
		assert: discoverer candidates second value equals: 'value2'
]]]

% ${changes:path=code/012-EDAAJsonFileDiscovererTest_testParseCommandListenerAdapterInJsonFile.ombu}$
[[[methodDefinition=true|lineNumber=true
testParseCommandListenerAdapterInJsonFile
	| fileContents discoverer commandListener |
	fileContents := '{
  "commandListener": {
    "host": "localhost",
    "port": 61613,
    "user": "user",
    "password": "secret",
    "queue": "messages-to-eda",
    "durable": true,
    "ack": "client-individual",
    "prefetchCount": 1,
    "timeout": 60,
    "debug": true,
    "restartOnError": false
  }
}'.
	self write: fileContents toFile: tempJsonFile.
	discoverer := EDAAJsonFileDiscoverer forJsonFile: tempJsonFile.
	self
		assert: discoverer isNotNil;
		assert: discoverer candidates isNotEmpty;
		assert: discoverer candidates size equals: 1;
		assert: discoverer candidates first isNotNil.
	commandListener := discoverer candidates first.
	self
		assert: commandListener isNotNil;
		assert: commandListener key equals: 'commandListener';
		assert: (commandListener value at: 'host') equals: 'localhost';
		assert: (commandListener value at: 'port') equals: 61613;
		assert: (commandListener value at: 'user') equals: 'user';
		assert: (commandListener value at: 'password') equals: 'secret';
		assert: (commandListener value at: 'queue')
			equals: 'messages-to-eda';
		assert: (commandListener value at: 'durable') equals: true;
		assert: (commandListener value at: 'ack')
			equals: 'client-individual';
		assert: (commandListener value at: 'prefetchCount') equals: 1;
		assert: (commandListener value at: 'timeout') equals: 60;
		assert: (commandListener value at: 'debug') equals: true;
		assert: (commandListener value at: 'restartOnError') equals: false
]]]

All tests are passing again.

!!! Figuring out the adapter class

We'd like the new ==EDAACandidate== to help us figuring out the actual class of the adapter it represents.
The simplest behavior is to use class names as keys. Let's start with that approach.

% ${changes:path=code/013-EDAACandidateTest_testAdapterClassAsCandidateKey.ombu}$
[[[methodDefinition=true|lineNumber=true
testAdapterClassAsCandidateKey
	| candidate |
	candidate := EDAACandidate withKey: 'EDAAMongoEventStore' value: nil.
	self assert: candidate adapterClass equals: #EDAAMongoEventStore
]]]

We have to implement the new method ""adapterClass"".

% ${changes:path=code/014-EDAACandidate_adapterClass.ombu}$
[[[methodDefinition=true|lineNumber=true
adapterClass
	^ #EDAAMongoEventStore
]]]

This has helped us to think of the method name, but the implementation is incorrect. Let's improve the test to fix it.

% ${changes:path=code/015-EDAACandidateTest_testAdapterClassAsCandidateKey.ombu}$
[[[methodDefinition=true|lineNumber=true
testAdapterClassAsCandidateKey
	| candidate |
	candidate := EDAACandidate withKey: 'EDAAMongoEventStore' value: nil.
	self assert: candidate adapterClass equals: #EDAAMongoEventStore.
	candidate := EDAACandidate withKey: 'EDAAMemoryEventStore' value: nil.
	self assert: candidate adapterClass equals: #EDAAMemoryEventStore
]]]

The simplest implementation of ""adapterClass"" passing the test is:

% ${changes:path=code/016-EDAACandidate_adapterClass.ombu}$
[[[methodDefinition=true|lineNumber=true
adapterClass
	^ self key asSymbol
]]]

Using adapter names as keys is a valid approach, but it's not enough for us:
- it's not the most readable format we can think of,
- it's not flexible,
- it doesn't support current PharoEDA configuration files.

We can support different approaches to figure out the class names of the adapter for a given key. A simple one is using annotations, via the ==Pragma== class, in classes using a certain trait. We use traits for this since they don't impose a hierarchy requirement.
Let's write our next test.

% ${changes:path=code/017-EDAACandidateTest_testAdapterClassFromPragma.ombu}$
[[[methodDefinition=true|lineNumber=true
testAdapterClassFromPragma
	| candidate |
	candidate := EDAACandidate withKey: 'arbitraryKey' value: nil.
	self assert: candidate adapterClass equals: #EDAAMongoEventStore
]]]

We want to provide the mapping directly in the test. Let's define a new trait, with no methods whatsoever, as a kind of Marker Interface. The name is probably not a good choice, because it actually doesn't provide any means to resolve the class name of the adapter.

% ${changes:path=code/018-EDAAPragmaBasedCandidateAdapterClassNameResolver.ombu}$
[[[classDefinition=true|lineNumber=true
Trait named: #EDAAPragmaBasedCandidateAdapterClassNameResolver
	 uses: {}
	 package: 'EDAA-Domain'
]]]

We can "use" it in our test now.

% ${changes:path=code/019-EDAACandidateTest.ombu}$
[[[classDefinition=true|lineNumber=true
TestCase subclass: #EDAACandidateTest
	uses: EDAAPragmaBasedCandidateAdapterClassNameResolver
	instanceVariableNames: ''
	classVariableNames: ''
	package: 'EDAA-Domain-Tests'
]]]

The method to provide the mapping could be just:

% ${changes:path=code/017-EDAACandidateTest_arbitraryKey.ombu}$
[[[methodDefinition=true|lineNumber=true
arbitraryKey
	"Maps 'arbitraryKey' to #EDAAMongoEventStore"
	<edaAdapterClass: #EDAAMongoEventStore>
	^ self
]]]

To resolve the class name of the adapter, the candidate can use the trait to find its users, look for the ""edaAdapterClass"" annotation, check if the name of the method matches the key, and if so use the ==Pragma== attribute. Notice we don't use the method's return value, since we don't need to invoke it. That would impose additional requirements on how to build an instance of the class, just for the sake of using the annotation.

The ""adapterClass"" method needs to be adapted to support this new strategy. Let's make its current implementation available as another name.

% ${changes:path=code/018-EDAACandidate_adapterClassFromKey.ombu}$
[[[methodDefinition=true|lineNumber=true
adapterClassFromKey
	^ self key asSymbol
]]]

We need to be able to know if a key matches an existing class.

% ${changes:path=code/019-EDAACandidate_isClassValid_.ombu}$
[[[methodDefinition=true|lineNumber=true
isClassValid: aSymbol
	^ (Smalltalk environment at: aSymbol ifAbsent: [ nil ]) isNotNil
]]]

Our new ""adapterClass"" method becomes:

% ${changes:path=code/020-EDAACandidate_adapterClass.ombu}$
[[[methodDefinition=true|lineNumber=true
adapterClass
	| result valid |
	result := self adapterClassFromKey.
	valid := self isClassValid: result.
	valid ifFalse: [ result := self adapterClassFromPragma.
	         valid := self isClassValid: result ].
	^ valid
		ifTrue: [ result ]
		ifFalse: [ nil ]
]]]

The new method ""adapterClassFromPragma""'s code matches the description above.

% ${changes:path=code/021-EDAACandidate_adapterClassFromPragma.ombu}$
[[[methodDefinition=true|lineNumber=true
adapterClassFromPragma
	| results annotatedClasses |
	annotatedClasses := EDAAPragmaBasedCandidateAdapterClassNameResolver
		traitUsers.
	annotatedClasses
		do: [ :annotatedClass |
			| pragmas |
			pragmas := Pragma
				allNamed: #edaAdapterClass:
				inAndBelow: annotatedClass.
			results := pragmas
				select: [ :pragma | pragma method selector = self key ]
				thenCollect: [ :pragma | pragma argumentAt: 1 ] ].
	^ results
		ifNil: [ nil ]
		ifNotNil: [ :r | r ifEmpty: [ nil ] ifNotEmpty: [ :c | c first ] ]
]]]

All tests should pass now.

!!!! Refactoring

Let's extract the logic that finds the adapter class for a single class in its own method.

% ${changes:path=code/022-EDAACandidate_adapterClassesFromPragmaIn_.ombu}$
[[[methodDefinition=true|lineNumber=true
adapterClassesFromPragmaIn: annotatedClass
	| pragmas |
	pragmas := Pragma
		allNamed: #edaAdapterClass:
		inAndBelow: annotatedClass.
	^ pragmas
		select: [ :pragma | pragma method selector = self key ]
		thenCollect: [ :pragma | pragma argumentAt: 1 ]
]]]

The new ""adapterClassFromPragma"" method becomes:

% ${changes:path=code/023-EDAACandidate_adapterClassFromPragma.ombu}$
[[[methodDefinition=true|lineNumber=true
adapterClassFromPragma
	| results annotatedClasses |
	results := OrderedCollection new.
	annotatedClasses := EDAAPragmaBasedCandidateAdapterClassNameResolver
		traitUsers.
	annotatedClasses
		do:
			[ :annotatedClass | results addAll: (self adapterClassesFromPragmaIn: annotatedClass) ].
	^ results
		ifNil: [ nil ]
		ifNotNil: [ :r | r ifEmpty: [ nil ] ifNotEmpty: [ :c | c first ] ]
]]]

!!! Supporting annotations on class-side methods

There's no reason to constrain us to instance-side methods. Let's change our current test if only to illustrate how annotations can be used in class-side methods.

% ${changes:path=code/024-EDAACandidateTest_testAdapterClassFromPragma.ombu}$
[[[methodDefinition=true|lineNumber=true
testAdapterClassFromPragma
	| candidate |
	candidate := EDAACandidate withKey: 'arbitraryKey' value: nil.
	self assert: candidate adapterClass equals: #EDAAMongoEventStore.
	candidate := EDAACandidate
		withKey: 'classSideArbitraryKey'
		value: nil.
	self assert: candidate adapterClass equals: #EDAAMemoryEventStore
]]]

The annotated method would be similar to the one we've been using so far, but this time on the class side.

% ${changes:path=code/025-EDAACandidateTest_class_classSideArbitraryKey.ombu}$
[[[methodDefinition=true|lineNumber=true
classSideArbitraryKey
	"Maps 'classSideArbitraryKey' to #EDAAMemoryventStore"

	<edaAdapterClass: #EDAAMemoryEventStore>
	^ self
]]]

Now that the test is failing, we just need to take into account class-side methods when looking for the annotations.

% ${changes:path=code/026-EDAACandidate_adapterClassesFromPragmaIn_.ombu}$
[[[methodDefinition=true|lineNumber=true
adapterClassesFromPragmaIn: annotatedClass
	| pragmas |
	pragmas := (Pragma
		allNamed: #edaAdapterClass:
		inAndBelow: annotatedClass) asOrderedCollection.
	pragmas
		addAll: (Pragma allNamed: #edaAdapterClass: inAndBelow: annotatedClass class).
	^ pragmas
		select: [ :pragma | pragma method selector = self key ]
		thenCollect: [ :pragma | pragma argumentAt: 1 ]
]]]

The test should pass now.

!!! Multiple adapters for the same key

So far we are assuming there can only be one adapter for each key. We are not enforcing it, but it's an implicit assumption.
Let's write a test.

% ${changes:path=code/027-EDAACandidateTest_testSeveralAdaptersWithTheSameKeyAreSupported.ombu}$
[[[methodDefinition=true|lineNumber=true
testSeveralAdaptersWithTheSameKeyAreSupported
	| candidates |
	candidates := (EDAACandidate withKey: 'arbitraryKey' value: nil) adapterClasses.
	self
		assert: (candidates includes: #EDAAMongoEventStore).
	self
		assert: (candidates includes: #EDAAMemoryEventStore)
]]]

The obvious fix consists of removing the assumption that we only need the first adapter found.
For that, we can rename our current ''adapterClassFromPragma'' method to ''adapterClassesFromPragma'', returning the complete list of adapters.

% ${changes:path=code/028-EDAACandidate_adapterClassesFromPragma.ombu}$
[[[methodDefinition=true|lineNumber=true
adapterClassesFromPragma
	| results annotatedClasses |
	results := OrderedCollection new.
	annotatedClasses := EDAAPragmaBasedCandidateAdapterClassNameResolver
		traitUsers.
	annotatedClasses
		do:
			[ :annotatedClass | results addAll: (self adapterClassesFromPragmaIn: annotatedClass) ].
	^ results
]]]

The new ''adapterClasses'' method collects the adapter classes from the current sources: annotations, and the class matching the candidate key.

% ${changes:path=code/029-EDAACandidate_adapterClasses.ombu}$
[[[methodDefinition=true|lineNumber=true
adapterClasses
	| results |
	results := self adapterClassesFromPragma.
	results add: self adapterClassFromKey.
	^ results select: [ :cls | self isClassValid: cls ]
]]]

''adapterClass'' becomes a bit simpler.

% ${changes:path=code/030-EDAACandidate_adapterClass.ombu}$
[[[methodDefinition=true|lineNumber=true
adapterClass
	| potentialAdapterClasses |
	potentialAdapterClasses := self adapterClasses
		select: [ :cls | self isClassValid: cls ].
	^ potentialAdapterClasses ifEmpty: [ nil ] ifNotEmpty: [ :c | c first ]
]]]

The new test should pass. Let's delete the old ''adapterClassFromPragma'' method, and check all tests still pass.

We have an issue when more than one adapter class fits. Which one should we pick?
With what we did before, if the key matches the name of the class, it stopped the search. With our new ''adapterClasses'' implementation, if there're annotated classes, it chooses differently. Let's describe the problem in a new test.

% ${changes:path=code/031-EDAACandidateTest_testAdapterMatchingKeyIsPreferred.ombu}$
[[[methodDefinition=true|lineNumber=true
testAdapterMatchingKeyIsPreferred
	| candidate |
	candidate := (EDAACandidate withKey: 'EDAAMongoEventStore' value: nil)
		adapterClass.
	self assert: candidate equals: #EDAAMongoEventStore
]]]

This test seems useless. But what if we declare a new mapping?

% ${changes:path=code/032-EDAACandidateTest_EDAAMongoEventStore.ombu}$
[[[methodDefinition=true|lineNumber=true
EDAAMongoEventStore
	"See testAdapterMatchingKeyIsPreferred"

	<edaAdapterClass: #EDAAMemoryEventStore>
	^ self
]]]

Now there're two matches for the key ''EDAAMongoEventStore'': that very class (because it matches the key), and ''EDAAMemoryEventStore'' (because of the new method we just added). The test now fails.

The problem to solve is: if there're more than one adapter class found for a given key, which one should we choose? The preferred one should always be the class matching the key itself.

% ${changes:path=code/033-EDAACandidate_adapterClasses.ombu}$
[[[methodDefinition=true|lineNumber=true
adapterClasses
	| results |
	results := self adapterClassesFromPragma.
	self adapterClassFromKey ifNotNil: [ :k | results addFirst: k ].
	^ results select: [ :cls | self isClassValid: cls ]
]]]

While the tests now pass, we can see we perform a pragma-based lookup even when the key is a class name, and we can return it right away. Let's fix it in the ''adapterClass'' method.

% ${changes:path=code/034-EDAACandidate_adapterClass.ombu}$
[[[methodDefinition=true|lineNumber=true
adapterClass
	| result fromKey potentialAdapterClasses |
	fromKey := self adapterClassFromKey.
	result := (self isClassValid: fromKey)
		ifTrue: [ fromKey ]
		ifFalse: [ potentialAdapterClasses := self adapterClassesFromPragma
				select: [ :cls | self isClassValid: cls ].
			potentialAdapterClasses
				ifEmpty: [ nil ]
				ifNotEmpty: [ :c | c first ] ].
	^ result
]]]

However, what if all of the matches come from pragmas? A simple solution is to sort the matches according to certain criteria, and then choose the first one.
In other components of PharoEDA we use a ''priority'' value to sort. So, if the key isn't itself a class name, take the priority from another argument in the pragma.

Let's add the new argument to all the pragmas we have so far.

% ${changes:path=code/035-EDAACandidateTest_arbitraryKey.ombu}$
[[[methodDefinition=true|lineNumber=true
arbitraryKey
	"Maps 'arbitraryKey' to #EDAAMongoEventStore"

	<edaAdapterClass: #EDAAMongoEventStore priority: 2000>
	^ self
]]]

% ${changes:path=code/036-EDAACandidateTest_EDAAMongoEventStore.ombu}$
[[[methodDefinition=true|lineNumber=true
EDAAMongoEventStore
	"See testAdapterMatchingKeyIsPreferred"

	<edaAdapterClass: #EDAAMemoryEventStore priority: 1000>
	^ self
]]]

% ${changes:path=code/037-EDAACandidateTest_class_arbitraryKey.ombu}$
[[[methodDefinition=true|lineNumber=true
arbitraryKey
	"Maps 'arbitraryKey' to #EDAAMemoryventStore"

	<edaAdapterClass: #EDAAMemoryEventStore priority: 101>
	^ self
]]]

% ${changes:path=code/038-EDAACandidateTest_class_classSideArbitraryKey.ombu}$
[[[methodDefinition=true|lineNumber=true
classSideArbitraryKey
	"Maps 'classSideArbitraryKey' to #EDAAMemoryventStore"

	<edaAdapterClass: #EDAAMemoryEventStore priority: 102>
	^ self
]]]

Now some test fails because we have changed the pragmas, and it's unable to find any. Recall the lookup process is performed by
[[[
Pragma allNamed: #edaAdapterClass: inAndBelow: annotatedClass
]]]

We need to update it to the new pragma.

% ${changes:path=code/039-EDAACandidate_adapterClassesFromPragmaIn_.ombu}$
[[[methodDefinition=true|lineNumber=true
adapterClassesFromPragmaIn: annotatedClass
	| pragmas |
	pragmas := (Pragma
		allNamed: #edaAdapterClass:priority:
		inAndBelow: annotatedClass) asOrderedCollection.
	pragmas
		addAll: (Pragma allNamed: #edaAdapterClass:priority: inAndBelow: annotatedClass class).
	^ pragmas
		select: [ :pragma | pragma method selector = self key asSymbol ]
		thenCollect: [ :pragma | pragma argumentAt: 1 ]
]]]

Now the tests pass, but we are not testing which adapter should be picked based on its priority.
We need a new test.

% ${changes:path=code/040-EDAACandidateTest_testPriorityIsUsedToPickThePragmaAdapter.ombu}$
[[[methodDefinition=true|lineNumber=true
testPriorityIsUsedToPickThePragmaAdapter
	| candidate |
	candidate := (EDAACandidate withKey: 'arbitraryKey' value: nil)
		adapterClassesFromPragma first.
	self assert: candidate equals: #EDAAMemoryEventStore
]]]

This test checks the adapter to be picked should be ''#EDAAMemoryEventStore'', since its priority is 101 (and 102), while ''#EDAAMongoEventStore'' is 2000.

The changes required to make the test pass extend the boundaries of a single method. Currently, ''adapterClassesFromPragmaIn:'' returns a list of symbols (adapter classes) found by inspecting the pragmas of a single class. Such list is then used in ''adapterClassesFromPragma''. Now we need to sort all occurrences based on the priority value, regardless of the class each pragma belongs. Therefore, ''adapterClassesFromPragmaIn:'' needs to return the pragma instances, not just the symbol, so ''adapterClassesFromPragma'' can sort all of the correctly. The name of the methods should change to express they return pragmas now.

% ${changes:path=code/041-EDAACandidate_adapterClassPragmasIn_.ombu}$
[[[methodDefinition=true|lineNumber=true
adapterClassPragmasIn: annotatedClass
	| pragmas |
	pragmas := (Pragma
		allNamed: #edaAdapterClass:priority:
		inAndBelow: annotatedClass) asOrderedCollection.
	pragmas
		addAll:
			(Pragma
				allNamed: #edaAdapterClass:priority:
				inAndBelow: annotatedClass class).
	^ pragmas
		select: [ :pragma | pragma method selector = self key asSymbol ]
]]]

% ${changes:path=code/042-EDAACandidate_adapterClassPragmas.ombu}$
[[[methodDefinition=true|lineNumber=true
adapterClassPragmas
	| results annotatedClasses |
	results := OrderedCollection new.
	annotatedClasses := EDAAPragmaBasedCandidateAdapterClassNameResolver
		traitUsers.
	annotatedClasses
		do:
			[ :annotatedClass | results addAll: (self adapterClassPragmasIn: annotatedClass) ].
	^ results
]]]

Finally, we can just sort the pragmas before extracting the adapter class name.

% ${changes:path=code/043-EDAACandidate_adapterClassesFromPragma.ombu}$
[[[methodDefinition=true|lineNumber=true
adapterClassesFromPragma
	^ (self adapterClassPragmas
		sort: [ :a :b | (a argumentAt: 2) < (b argumentAt: 2) ])
		collect: [ :p | p argumentAt: 1 ]
]]]

The new test passes, but an old one has started failing now, because of the values we used for the priorities.

[[[
testAdapterClassFromPragma
	| candidate |
	candidate := EDAACandidate withKey: 'arbitraryKey' value: nil.
	self assert: candidate adapterClass equals: #EDAAMongoEventStore.
	candidate := EDAACandidate
		withKey: 'classSideArbitraryKey'
		value: nil.
	self assert: candidate adapterClass equals: #EDAAMemoryEventStore
]]]

This test is now wrong and we should fix it (or remove it).

% ${changes:path=code/044-EDAACandidateTest_testAdapterClassFromPragma.ombu}$
[[[methodDefinition=true|lineNumber=true
testAdapterClassFromPragma
	| candidate |
	candidate := EDAACandidate withKey: 'arbitraryKey' value: nil.
	self assert: candidate adapterClass equals: #EDAAMemoryEventStore.
	candidate := EDAACandidate
		withKey: 'classSideArbitraryKey'
		value: nil.
	self assert: candidate adapterClass equals: #EDAAMemoryEventStore
]]]

!!! Default keys for current PharoEDA adapters

PharoEDA applications currently expect the Json files used to configure the adapters, to have certain names as keys:
- ''commandListener'', for the adapter used as primary port, receiving commands;
- ''eventPublisher'', for the adapter able to publish events;
- ''eventStore'', for writing events in the event store;
- ''projections'', to read and write projections from a database.

Let's write a test to make sure the first one is available by default.

% ${changes:path=code/045-EDAACandidateTest_testCommandListenerIsAvailable.ombu}$
[[[methodDefinition=true|lineNumber=true
testCommandListenerIsAvailable
	| candidate adapter |
	candidate := (EDAACandidate withKey: 'commandListener' value: nil).
	adapter := candidate toAdapter.
	self
		assert: adapter isNotNil;
		assert: adapter class equals: EDAACommandStompTopicListener
]]]

There's one missing method: ''toAdapter'' in ==EDACandidate==. As usual, we'll use the debugger to create it, while running the test.

The simplest implementation returns what the test expects.

% ${changes:path=code/046-EDAACandidate_toAdapter.ombu}$
[[[methodDefinition=true|lineNumber=true
toAdapter
	^ EDAACommandStompTopicListener new
]]]

The test is passing. Let's add a new one to force us to implement the conversion logic from a candidate to an adapter.

% ${changes:path=code/047-EDAACandidateTest_testEventPublisherIsAvailable.ombu}$
[[[methodDefinition=true|lineNumber=true
testEventPublisherIsAvailable
	| candidate adapter |
	candidate := (EDAACandidate withKey: 'eventPublisher' value: nil).
	adapter := candidate toAdapter.
	self
		assert: adapter isNotNil;
		assert: adapter class equals: EDAAEventStompTopicPublisher
]]]

This new test fail. We use it to move us forward, but we'll delay working on it for now.

First, we need to create proper adapter instances in ==EDAACandidate=='s ''toAdapter''. Recall that the ''adapterClass'' method returns a symbol, not a class instance. Let's add a new ''toClass:'' method based on our current ''isClassValid'', and make the latter use the former.

% ${changes:path=code/048-EDAACandidate_toClass_.ombu}$
[[[methodDefinition=true|lineNumber=true
toClass: aSymbol
	^ (Smalltalk environment at: aSymbol ifAbsent: [ nil ])
]]]

% ${changes:path=code/049-EDAACandidate_isClassValid_.ombu}$
[[[methodDefinition=true|lineNumber=true
isClassValid: aSymbol
	^ (self toClass: aSymbol) isNotNil
]]]

Now ''toAdapter'' becomes:
% ${changes:path=code/050-EDAACandidate_toAdapter.ombu}$
[[[methodDefinition=true|lineNumber=true
toAdapter
	^ (self toClass: self adapterClass) new
]]]

Second, let's make ==EDAACommandListenerStompTopicPublisher== discoverable, by making it use ==EDAAPragmaBasedCandidateAdapterClassNameResolver==.

% ${changes:path=code/051-EDAACandidate.ombu}$
[[[classDefinition=true|lineNumber=true
EDAAStompTopicListener subclass: #EDAACommandStompTopicListener
	uses: EDAAPragmaBasedCandidateAdapterClassNameResolver
	instanceVariableNames: ''
	classVariableNames: ''
	package: 'EDAA-Messaging-Stomp'
]]]

We can add a method to declare it as a valid adapter for ''commandListener'' keys.

% ${changes:path=code/052-EDAACandidate_class_commandListener.ombu}$
[[[methodDefinition=true|lineNumber=true
commandListener
	<edaAdapterClass: #EDAACommandStompTopicListener priority: 100>
	^ self
]]]

Now we have our ''testCommandListenerIsAvailable'' test passing again.
Let's do the same for ''testEventPublisherInAvailable'' as well.

% ${changes:path=code/053-EDAAEventStompTopicPublisher.ombu}$
[[[classDefinition=true|lineNumber=true
EDAAStompTopicPublisher subclass: #EDAAEventStompTopicPublisher
	uses: EDAAPragmaBasedCandidateAdapterClassNameResolver
	instanceVariableNames: ''
	classVariableNames: ''
	package: 'EDAA-Messaging-Stomp'
]]]

However, still fails, but now because the adapter cannot find its settings when it tries to initialize itself. This code is based on the PharoEDA codebase that used classes as configuration stores, and therefore is part of the refactoring effort to provide that configuration information differently. To avoid dealing with too many things at once, let's disable the initialization process.

% ${changes:path=code/054-EDAAStompTopicPublisher_initialize.ombu}$
[[[methodDefinition=true|lineNumber=true
initialize
	super initialize.
	"self client: (self buildClientWith: self class)"
]]]

!!!! Refactoring

There're some issues that need our attention. First of all, the name of the trait can be difficult to come up with for adapter implementors. Let's rename it to ==EDAAContainsAdapterClassPragma==.

% ${changes:path=code/055-EDAACandidate_adapterClassPragmas.ombu}$
[[[methodDefinition=true|lineNumber=true
adapterClassPragmas
	| results annotatedClasses |
	results := OrderedCollection new.
	annotatedClasses := EDAAContainsAdapterClassPragma
		traitUsers.
	annotatedClasses
		do:
			[ :annotatedClass | results addAll: (self adapterClassPragmasIn: annotatedClass) ].
	^ results
]]]

% ${changes:path=code/056-EDAACandidateTest.ombu}$
[[[classDefinition=true|lineNumber=true
TestCase subclass: #EDAACandidateTest
	uses: EDAAContainsAdapterClassPragma
	instanceVariableNames: ''
	classVariableNames: ''
	package: 'EDAA-Domain-Tests'
]]]

% ${changes:path=code/057-EDAACommandStompTopicListener.ombu}$
[[[classDefinition=true|lineNumber=true
EDAAStompTopicListener subclass: #EDAACommandStompTopicListener
	uses: EDAAContainsAdapterClassPragma
	instanceVariableNames: ''
	classVariableNames: ''
	package: 'EDAA-Messaging-Stomp'
]]]

% ${changes:path=code/058-EDAAEventStompTopicPublisher.ombu}$
[[[classDefinition=true|lineNumber=true
EDAAStompTopicPublisher subclass: #EDAAEventStompTopicPublisher
	uses: EDAAContainsAdapterClassPragma
	instanceVariableNames: ''
	classVariableNames: ''
	package: 'EDAA-Messaging-Stomp'
]]]

Second, in our adapters we had to indicate their own class name as pragma argument. We could infer it. However, our current approach fits great in scenarios in which we want to provide the mapping information elsewhere, outside the adapter itself. Let's support both pragmas.

% ${changes:path=code/059-EDAACommandStompTopicListener_class_commandListener.ombu}$
[[[methodDefinition=true|lineNumber=true
commandListener
	<edaAdapterClassWithPriority: 100>
	^ self
]]]

The ''testCommandListenerIsAvailable'' fails again.

Let's refactor ''adapterClassPragmasIn:'' in ==EDAACandidate== to receive the pragma symbol.

% ${changes:path=code/060-EDAACandidate_adapterClassPragmas_in_.ombu}$
[[[methodDefinition=true|lineNumber=true
adapterClassPragmas: aSymbol in: annotatedClass
	| pragmas |
	pragmas := (Pragma allNamed: aSymbol inAndBelow: annotatedClass)
		asOrderedCollection.
	pragmas
		addAll: (Pragma allNamed: aSymbol inAndBelow: annotatedClass class).
	^ pragmas
		select: [ :pragma | pragma method selector = self key asSymbol ]
]]]

''adapterClassPragmasIn:'' now becomes:

% ${changes:path=code/060-EDAACandidate_adapterClassPragmasIn_.ombu}$
[[[methodDefinition=true|lineNumber=true
adapterClassPragmasIn: annotatedClass
	| results |
	results := OrderedCollection new.
	(OrderedCollection
		with: #edaAdapterClass:priority:
		with: #edaAdapterClassWithPriority:)
		do:
			[ :aSymbol | results addAll: (self adapterClassPragmas: aSymbol in: annotatedClass) ].
	^ results
]]]

We need to deal with the sorting part. Since the lookup process can end up with pragmas of different signature, to sort them by priority we can assume the last parameter is the value used for sorting. The ''collect'' part is different now too. If the number of arguments of the pragma is greater than 1, we assume the first one contains the name of the adapter class. Otherwise, the adapter class is the class containing the pragma.

% ${changes:path=code/061-EDAACandidate_adapterClassesFromPragma.ombu}$
[[[methodDefinition=true|lineNumber=true
adapterClassesFromPragma
	^ (self adapterClassPragmas
		sort:
			[ :a :b | (a argumentAt: a arguments size) < (b argumentAt: b arguments size) ])
		collect: [ :p |
			p arguments size > 1
				ifTrue: [ p argumentAt: 1 ]
				ifFalse: [ p method classBinding value allInstances first name asSymbol ] ]
]]]

Now the tests pass again. However, the current implementation assumes the method with the pragma is on the class side. Let's change it to the instance side temporarily, and fix it.

% ${changes:path=code/062-EDAACandidate_adapterClassesFromPragma.ombu}$
[[[methodDefinition=true|lineNumber=true
adapterClassesFromPragma
	^ (self adapterClassPragmas
		sort:
			[ :a :b | (a argumentAt: a arguments size) < (b argumentAt: b arguments size) ])
		collect: [ :p |
			p arguments size > 1
				ifTrue: [ p argumentAt: 1 ]
				ifFalse: [ | cls |
					cls := p method classBinding value.
					cls isMeta
						ifTrue: [ cls allInstances first name asSymbol ]
						ifFalse: [ cls name asSymbol ] ] ]
]]]

Before continuing, we should consider the scenario when creating a new adapter. If it's the first of its kind, we shouldn't bother about priorities. That affects only when we need help to choose among more than one. We shouldn't force the developer to provide a priority unless it makes sense.
A simple solution is to use a default value for pragmas that don't provide it. In other words, we need a new pragma with no arguments: the adapter class is the class the pragma is used, and the priority is the default.

% ${changes:path=code/063-EDAACandidate_commandListener.ombu}$
[[[methodDefinition=true|lineNumber=true
commandListener
	<edaAdapterClass>
	^ self
]]]

The ''testCommandListenerIsAvailable'' test is falling again, as expected. Let's start by adding the new pragma to the list.

% ${changes:path=code/063-EDAACandidate_adapterClassesFromPragmasIn_.ombu}$
[[[methodDefinition=true|lineNumber=true
adapterClassPragmasIn: annotatedClass
	| results |
	results := OrderedCollection new.
	(OrderedCollection
		with: #edaAdapterClass:priority:
		with: #edaAdapterClassWithPriority:
		with: #edaAdapterClass)
		do:
			[ :aSymbol | results addAll: (self adapterClassPragmas: aSymbol in: annotatedClass) ].
	^ results
]]]

We need to take care of the priorities, assuming they might not be specified.

% ${changes:path=code/064-EDAACandidate_adapterClassesFromPragma.ombu}$
[[[methodDefinition=true|lineNumber=true
adapterClassesFromPragma
	^ (self adapterClassPragmas
		sort: [ :a :b |
			| aPriority bPriority |
			aPriority := a arguments size > 1
				ifTrue: [ a argumentAt: a arguments size ]
				ifFalse: [ self defaultPriority ].
			bPriority := b arguments size > 1
				ifTrue: [ b argumentAt: b arguments size ]
				ifFalse: [ self defaultPriority ].
			aPriority < bPriority ])
		collect: [ :p |
			p arguments size > 1
				ifTrue: [ p argumentAt: 1 ]
				ifFalse: [ | cls |
					cls := p method classBinding value.
					cls isMeta
						ifTrue: [ cls allInstances first name asSymbol ]
						ifFalse: [ cls name asSymbol ] ] ]
]]]

The default priority is information provided by the class itself.


% ${changes:path=code/065-EDAACandidate_defaultPriority.ombu}$
[[[methodDefinition=true|lineNumber=true
defaultPriority
	^ self class defaultPriority
]]]

% ${changes:path=code/066-EDAACandidate_class_defaultPriority.ombu}$
[[[methodDefinition=true|lineNumber=true
defaultPriority
	^ 100
]]]

The tests pass again. However, the ''adapterClassesFromPragma'' has become a bit too long. Let's promote the closures to methods.

% ${changes:path=code/067-EDAACandidate_sortPragmasByPriority_and_.ombu}$
[[[methodDefinition=true|lineNumber=true
sortPragmasByPriority: aPragma and: anotherPragma
	| aPriority bPriority |
	aPriority := aPragma arguments size > 1
		ifTrue: [ aPragma argumentAt: aPragma arguments size ]
		ifFalse: [ self defaultPriority ].
	bPriority := anotherPragma arguments size > 1
		ifTrue: [ anotherPragma argumentAt: anotherPragma arguments size ]
		ifFalse: [ self defaultPriority ].
	^ aPriority < bPriority
]]]

% ${changes:path=code/068-EDAACandidate_collectPragma_.ombu}$
[[[methodDefinition=true|lineNumber=true
collectPragma: aPragma
	^ aPragma arguments size > 1
		ifTrue: [ aPragma argumentAt: 1 ]
		ifFalse: [ | cls |
			cls := aPragma method classBinding value.
			cls isMeta
				ifTrue: [ cls allInstances first name asSymbol ]
				ifFalse: [ cls name asSymbol ] ]
]]]

% ${changes:path=code/069-EDAACandidate_adapterClassesFromPragma.ombu}$
[[[methodDefinition=true|lineNumber=true
adapterClassesFromPragma
	^ (self adapterClassPragmas
		sort: [ :a :b | self sortPragmasByPriority: a and: b ])
		collect: [ :p | self collectPragma: p ]
]]]

It's been dense, but now everything is simpler for the adapter developer.
